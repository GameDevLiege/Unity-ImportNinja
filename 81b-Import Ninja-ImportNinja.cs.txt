using System.Collections.Generic;
using System.IO;
using UnityEditor;
using UnityEngine;

[InitializeOnLoad]
public class Startup
{
    static Startup()
    {
        Debug.Log("Your Personal Ninja");

        DirectoryInfo   projectDirectory    = Directory.GetParent(Application.dataPath);
        string          unityDirectory      = Directory.GetParent(EditorApplication.applicationPath).FullName;
        string          importNinjaTemplate = unityDirectory + @"\Data\Resources\ScriptTemplates\ImportNinjaTemplate\";

        Dictionary<string, string> vars = new Dictionary<string, string>()
        {
            {"PROJECTNAME", projectDirectory.Name}
        };

        IEnumerable<EditablePathInfo> nodes = DirectoryCopy(
            sourceDirName:  importNinjaTemplate,
            destDirName:    Application.dataPath,
            copySubDirs:    true
        );

        foreach (EditablePathInfo node in nodes)
        {
            // TODO: Detect special names and store their locations
            // (eg. Editor.ninjaTemplate.cs.txt and _ninjaHidingSpot)

            foreach (KeyValuePair<string, string> rr in vars)
                node.nodeName = node.nodeName.Replace("#" + rr.Key + "#", rr.Value);
        }

        AssetDatabase.Refresh();
    }

    /// <summary>
    ///     Source: https://docs.microsoft.com/en-us/dotnet/standard/io/how-to-copy-directories
    ///     Modified by JeromeJ.
    /// </summary>
    /// <param name="vars"></param>

    private static IEnumerable<EditablePathInfo> DirectoryCopy(string sourceDirName, string destDirName, bool copySubDirs)
    {
        // Get the subdirectories for the specified directory.
        DirectoryInfo dir = new DirectoryInfo(sourceDirName);

        if (!dir.Exists)
        {
            throw new DirectoryNotFoundException(
                "Source directory does not exist or could not be found: "
                + sourceDirName);
        }

        DirectoryInfo[] dirs = dir.GetDirectories();
        
        // If the destination directory doesn't exist, create it.
        Directory.CreateDirectory(destDirName);

        // Get the files in the directory and copy them to the new location.
        FileInfo[] files = dir.GetFiles();
        foreach (FileInfo file in files)
        {
            EditablePathInfo path = new EditablePathInfo(Path.Combine(destDirName, file.Name));

            // Passed by reference
            yield return path;

            file.CopyTo(path.fullPath, false);
        }

        // If copying subdirectories, copy them and their contents to new location.
        if (copySubDirs)
        {
            foreach (DirectoryInfo subdir in dirs)
            {
                EditablePathInfo path = new EditablePathInfo(Path.Combine(destDirName, subdir.Name));

                // Passed by reference
                yield return path;

                // yield from
                foreach(EditablePathInfo node in DirectoryCopy(subdir.FullName, path.fullPath, copySubDirs))
                {
                    // Passed by reference
                    yield return node;
                }
            }
        }
    }
}


public class EditablePathInfo
{
    private string _nodeName;
    private string _fullpath;

    public string nodeName
    {
        get { return _nodeName; }
        set {
            _nodeName = value;
            _fullpath = Path.Combine(Path.GetDirectoryName(_fullpath), _nodeName);
        }
    }

    public string fullPath
    {
        get { return _fullpath; }
        set {
            _fullpath = value;
            _nodeName = Path.GetFileName(_fullpath);
        }
    }

    public EditablePathInfo(string _fullPath)
    {
        fullPath = _fullPath;
    }
}